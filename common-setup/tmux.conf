# to avoid tmux-sensible for overwriting this with reattach-to-user-session and causing issues
# see https://unix.stackexchange.com/questions/791132/why-is-tmux-picking-up-sh-as-shell-instead-of-my-normal-login-shell-bash
set-option -g default-command "$SHELL"

# look good
set -g default-terminal "screen-256color"

################################################################################
##### System clipboard (and copy-pipe) #####
################################################################################
# OSC-52 seems like a lot more trouble to get working than it is worth, so 
# just relying on delegating to pbcopy and friends

# 1) Do NOT use the system clipboard, even if the terminal supports it
set -g set-clipboard off

# 2) Tell tmux the OUTER terminal supports OSC-52 clipboard (Ms)
# Nope

# 3) Pick a copy command for pipe-based yanks (Wayland > macOS > X11)
# Default to xclip
set -g @copy_cmd "xclip -sel clip -i"
# Prefer pbcopy on macOS if available
if-shell "command -v pbcopy >/dev/null 2>&1" \
  'set -g @copy_cmd "pbcopy"'
# Prefer wl-copy on Wayland if available
if-shell "command -v wl-copy >/dev/null 2>&1" \
  'set -g @copy_cmd "wl-copy"'


# 4) Vi-style selections and yanks (works everywhere, no plugin)
unbind -T copy-mode-vi v
unbind -T copy-mode-vi y
bind   -T copy-mode-vi v send -X begin-selection
bind   -T copy-mode-vi y send -X copy-pipe-and-cancel "#{@copy_cmd}"
# Make Enter behave like y: copy via external clipboard tool and exit copy-mode
unbind -T copy-mode-vi Enter
bind   -T copy-mode-vi Enter send -X copy-pipe-and-cancel "#{@copy_cmd}"

# If you also use Space to start selection and Enter to finish, keep this:
unbind -T copy-mode-vi v
bind   -T copy-mode-vi v send -X begin-selection

# (Optional) line yank
bind   -T copy-mode-vi Y send -X copy-line

# (Optional) Mouse: drag to enter copy-mode immediately
bind -n MouseDrag1Pane if -F '#{pane_in_mode}' \
  'send -X begin-selection' \
  'copy-mode -M'
################################################################################
##### END system clipboard
################################################################################


#############
# TMS START #
#############
# tmux-sessionizer in Rust loosely based on the Primeagen script: https://github.com/jrmoulton/tmux-sessionizer

# display-popup was added between 3.1c and 3.2
# 1. show other active sessions with a fuzzy finder
# 2. similar to tms switch, you can show other active windows in the current session
if-shell "tmux-version ' >= 3.2'" \
    '\
    bind C-j display-popup -E "tms switch"; \
    bind C-w display-popup -E "tms windows"; \
    ';
# automatically rename the active session along with the directory name and the active directory inside all the panes in the active session will be changed to the renamed directory
bind C-s command-prompt -p "Rename active session to: " "run-shell 'tms rename %1'"
# automatically generate missing worktree windows for the active session or a provided session_name.
bind C-r "run-shell 'tms refresh'"
###########
# TMS END #
###########




# act like vim
setw -g mode-keys vi
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R
bind-key -r C-h select-window -t :-
bind-key -r C-l select-window -t :+
# unbind [
bind ` copy-mode
# unbind p
# bind p paste-buffer


# List of plugins - press <prefix>+I to fetch and install
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'

# Other examples:
# set -g @plugin 'github_username/plugin_name'
# set -g @plugin 'git@github.com/user/plugin'
# set -g @plugin 'git@bitbucket.com/user/plugin'


# scroll limit
set -g history-limit 10000

if-shell "test -f ~/.tmux/local" "source-file ~/.tmux/local"

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
