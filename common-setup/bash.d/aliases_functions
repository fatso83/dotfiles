# vim: syntax=sh

# since this is sourced from shared.lib in the dotfiles repo, we need 
# to source other files
if [[ "$BASH_D" == "" || "$BIN_DIR" == "" ]]; then
    printf "('${BASH_SOURCE[0]}'): Missing \$BASH_D and \$BIN_DIR environment variable.\n\n"
    return 1
fi

# https://www.gnu.org/software/bash/manual/html_node/Pattern-Matching.html#Pattern-Matching
#shopt -s extglob;

if ! declare -p t_debug > /dev/null 2> /dev/null; then
    source "$BASH_D/core_utils"
fi

t_debug "Reading aliases and functions"

if ! declare -p X_PLATFORM_UTILS > /dev/null 2>&1; then
    source "$BIN_DIR/cross-platform-utils.bashlib"
fi

function abspath(){
    python -c "import os,sys; print(os.path.abspath(sys.argv[1]))" "$1"
}

function command_exists(){
    command -v $@ > /dev/null
}

function function_exists(){
    [[ "$(type -t $1)" == "function" ]]
}

# I just cannot remember to use ccat, glow or bat
function fancy-cat(){
    if [[ $# > 0 ]]; then 
        local file="$(readlink -f $1)"
        case "$file" in
        *.md)
            glow "$file"
            # recurse on the next files
            shift 1
            if [[ $# > 0 ]]; then 
                cat $@
            fi
            ;; 
        *) bat $*
            ;;
        esac 
    else
        bat   
    fi
}


# Strip junk left from converting utf8<->cp1252
alias strip-non-ascii='python -c "import sys,re;[sys.stdout.write(re.sub('\''[^\x09\x0A\x0D\x20-\x7F]'\'', '\'''\'', line)) for line in sys.stdin]"'
alias strip-empty="egrep -v '^\s*$'"

t_debug Setting up aliases for conversions
alias urldecode='python3 -c "import sys, urllib.parse as p; print(p.unquote_plus(sys.argv[1]))"'
alias urlencode='python3 -c "import sys, urllib.parse as p; print(p.quote_plus(sys.argv[1]))"'
alias htmldecode='python3 -c "import sys, html; print(html.unescape(sys.argv[1]))"'
alias htmlencode='python3 -c "import sys, html; print(html.escape(sys.argv[1]))"'
alias html2text='npx -y @html-to/text-cli'

t_debug "Pascal, Kebab, Camel, ... case conversions"
alias pascal-case='~/bin/change-case --pascal'
alias camel-case='~/bin/change-case --camel'
alias snake-case='~/bin/change-case --snake'
alias kebab-case='~/bin/change-case --kebab'

t_debug Use htop if available
if which htop > /dev/null; then
    alias top='htop'
fi

IGNORE=""
if ! is_mac; then
  t_debug Add custom ignore pattern for GNU ls
  #ignore patterns
  for i in '*~' '*.pyc'; do 
      IGNORE="$IGNORE --ignore=$i"
  done
fi

t_debug small utils and aliases
# Color output - when CLICOLOR is defined, --color/-G is unneeded
alias v='ls -l'
alias clean-temp='find -E ~ -type f -and -regex ".*~$|.*-ck.js|.*.tmp" -exec rm {} \;'

# Pretty print json
alias prettify_json='python -mjson.tool'

# Indent text before sending it to Stack Overflow
alias indent4="sed -E 's/(^.*)/    \1/'"
alias remove-indent4="sed -E 's/^    //'"
alias de-indent4=remove-indent4
alias unindent4=remove-indent4

t_debug server aliases
alias webserver='python -m http.server'
alias servers='sudo lsof -iTCP -sTCP:LISTEN -P -n'

# time
alias epoch=millis #  tool that we compile ourselves

# find external ip
alias my-ip='curl -s http://ipinfo.io/ip'
alias my-ip-json='curl -s http://ifconfig.co/json'

# SOCKS proxy
alias socks_proxy='ssh -v -D 22222 carl-erik@timbuktu.kopseng.no -N'
alias socks_proxy_all='ssh -v -D :22222 carl-erik@timbuktu.kopseng.no -N'

# text manipulation "library". Just type "text<TAB>" to see all
function text.ltrim ()
{
    util.esed 's/^[[:space:]]+//'
}

function text.rtrim ()
{
    util.esed 's/[[:space:]]+$//'
}

function text.trim ()
{
    text.ltrim | text.rtrim
}

function text.lowercase(){
    tr "[:upper:]" "[:lower:]" 
}

function text.uppercase(){
    tr "[:lower:]" "[:upper:]"
}

# Used with the git alias functions; gd, gds, gdw, gdws
alias strip-diff-prefix='sed "s/^\([^-+ ]*\)[-+ ]/\\1/"' 

# Used a lot in utility setup scripts
function strip-comments(){
    util.esed -e 's/#.*//' $@ | strip-empty
}

function strip-color-codes(){
    util.esed -e 's/\[.{0,3}3.m//g'
}

# For stack overflow pasting
alias websafe='util.esed -e "s/(posten|bring|ptflow)/acme-org/gi" -e "s/$USER/my-user/gi" -e "s/(posten|bring|ptflow|pete)/foo-project/gi" -e "s/Notification/ze-domain/gi" -e "s/PH/otherdep/gi" '
alias stack-overflow-no-copy='websafe | indent4 '
alias stack-overflow='stack-overflow-no-copy | pbcopy; pbpaste; echo -e "\n\nCopied to pastebuffer (use stack-overflow-no-copy to avoid this)!"'


# "reminder aliases" for how to suspend and continue a process
alias processes-suspend='killall -sSTOP '
alias processes-start='killall -sSTART '

function psgrep() { ps -ef | grep -i "$@"; };

# System shortcuts
alias apt='sudo apt'

# Restore the original system path if for some reason some 
# command in your ~/bin directory does not work
function restore_path() {
        PATH="${ORIGINAL_PATH}"
        export PATH
}

# Zach Holman's git aliases converted to functions for more flexibility
#   @see https://github.com/holman/dotfiles/commit/2c077a95a610c8fd57da2bd04aa2c85e6fd37b7c#diff-4335824c6d289f1b8b41f7f10bf3a2e7
#   Being functions allow them to take arguments, such as additional options or filenames
#
#   The -r flag to `less` is uses to make it work with the color escape codes
#     -F  ........  --quit-if-one-screen
#                 Quit if entire file fits on first screen.
#   @depends on strip-diff-prefix alias
function gd() {   git diff          --color $@ | strip-diff-prefix | less -rF; }
function gds() {  git diff --staged --color $@ | strip-diff-prefix | less -rF; }
function gdw() {  git diff          --color --word-diff $@         | less -rF; }
function gdws() { git diff --staged --color --word-diff $@         | less -rF; }
alias gs='git status -sb' # upgrade your git if -sb breaks for you. it's fun.
alias glg='git lg' 
alias gco='git co' 
alias gbr='git branch'
alias gstash='git staash'

function gclone(){ 
    [[ $# == 0 ]] && echo "USAGE: gclone org/repo [subdir]" && return 1

    pushd ~/dev/; 
    if [[ $# == 2 ]]; then
        [[ -e $2 ]] || mkdir $2
        cd $2
    fi
    gh repo clone $1; 
    cd $(basename $1); 
}

# utility function that returns myname/repo
function local-repo(){
    local url=$(git config remote.origin.url) # --> git@github.com:team/proj
    echo $url |  util.esed -n -e 's/.*github.com[:/]([/a-zA-Z0-9-]+)(\.git)?/\1/p'
}

# View commits in GitHub web
function gh-commit(){ 
    local repo=$(local-repo)
    [[ -n $1 ]] && open "https://github.com/$repo/commit/$1" && return
    echo "Usage: gh-commit 779490"
}
function gh-compare(){ 
    local repo=$(local-repo)
    [[ -n $2 ]] &&  open "https://github.com/$repo/compare/$1...$2" \
    || echo "Usage: gh-compare 779490 master"; 
}

# Maven - fail as soon as a test fails
function mvn() { $(which mvn) -Dsurefire.skipAfterFailureCount=1 $EXTRA_MAVEN_OPTS $@; }

#
# Open JIRA issues: `nim 434` opens NIM-434 in the browser
function nim() { xdg-open http://diffia.atlassian.net/browse/NIM-$1;  }

# Nice util for listing all declared functions. You use `type` to print them
alias list-functions='declare | egrep '\''^[[:alpha:]][[:alnum:]_]* ()'\''; echo -e "\nTo print a function definition, issue \`type function-name\` "'

tmux-restore () {
    if [[ -n $1 ]]; then
        local setup_file="$HOME/.tmux/$1.proj" 
        local dir_file="$HOME/.tmux/$1.dir" 
        if [[ -e $setup_file ]]; then
            [[ -e $dir_file ]] && cd $(bash -c "echo $(cat $dir_file)") # set CWD
            command tmux new-session -s "$1" "tmux source-file $setup_file"
        else
            printf "\nNo such file \"$setup_file\".\nListing existing files:\n\n"
            ls -1 ~/.tmux/*.proj
            return 1
        fi
    else
        echo "Usage: tmux-restore my-js-setup"
        return 1
    fi
}

# allow to use alternative npm clients like PNPM with the same name. Lazy :p
# just use direnv's .envrc to define a path to a different npm, like pnpm
function npm(){ if [[ -z "$NPMBIN" ]]; then command npm "$@"; else $NPMBIN "$@"; fi; }
function npx(){ if [[ -z "$NPXBIN" ]]; then command npx "$@"; else $NPMBIN "$@"; fi; }

alias hub='printf "DEPRECATED: use the Github CLI \`gh\` instead!\n"'
alias n='printf "DEPRECATED: use ASDF for controlling global versions instead!: \`asdf global nodejs 20.0.0\`\n"'

# SSH recipes for myself

# Auto-open Bittorrent Sync
alias timbuktu_btsync="(sleep 2 && open http://localhost:8888)& ssh -L8888:127.0.0.1:8888 carl-erik@timbuktu.kopseng.no -N"

# Reverse SSH
# Connect to timbuktu.kopseng.no to allow timbuktu.kopseng.no:10001 to go directly against my own machine
# client 1: timbuktu_reverse_tunnel
# client 2: ssh -l my-client1-user -p 10001 timbuktu.kopseng.no
# Effect: client2 => timbuktu => client1
alias timbuktu_reverse_tunnel='ssh -v -R 10001:localhost:22 timbuktu.kopseng.no -N -l carl-erik'

# https://stackoverflow.com/a/40949364/200987
function delete-untagged-aws-images(){
    aws ecr  describe-repositories \
    | jq --raw-output .repositories[].repositoryName \
    | while read repo; do  
        imageIds=$(aws ecr list-images --repository-name $repo --filter tagStatus=UNTAGGED --query 'imageIds[*]' --output json  | jq -r '[.[].imageDigest] | map("imageDigest="+.) | join (" ")');
        if [[ "$imageIds" == "" ]]; then continue; fi
        aws ecr batch-delete-image --repository-name $repo --image-ids $imageIds; 
    done
}

function progress-file-size(){
    tail -f -c 1 "$1" | pv > /dev/null
}

function random_sha(){
    head -c 12 /dev/urandom | shasum | cut -d ' ' -f1
}

# Docker
dps() { docker ps --format '{{.ID}}\t{{.Names}}\t{{.Ports}}'; }

# Kafka
kafkabin() {
    if [[ "$#" == 0 ]]; then 
        printf "No scripts to run. Available commands in /opt/kafka/bin/:\n"
        kafkabin ls /opt/kafka/bin
        return 1
    fi
    docker run -ti  -v ".:/pwd" apache/kafka "$@"
}

# works perfectly with `send_sms.py --phone-file --file message.txt`
kidplan_html_phonenumbers(){
    util.esed -n  's/.*([0-9]{3}) ([0-9]{2}) ([0-9]{3}).*/\1\2\3/gp' 
}

t_debug "global aliases and functions finished"
