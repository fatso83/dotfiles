#!/usr/bin/env python
"""
Decodes pcap files containing TCP payloads
Example capture:  sudo tcpdump -i lo tcp port 56100 -nn -vvv -s 0 -w dump56100.pcap
dependency: scapy
"""

import sys
import argparse
from scapy.all import rdpcap, TCP, IP

def hexdump(data):
    """Print data in a format similar to `hexdump -C`."""
    for i in range(0, len(data), 16):
        chunk = data[i:i+16]
        hex_bytes = ' '.join(f'{b:02x}' for b in chunk)
        ascii_bytes = ''.join((chr(b) if 32 <= b <= 126 else '.') for b in chunk)
        print(f'{i:08x}  {hex_bytes:<48}  |{ascii_bytes}|')

def main():
    parser = argparse.ArgumentParser(description="Extract TCP payloads from a pcap file.")
    parser.add_argument("pcap_file", help="Path to the pcap file")
    parser.add_argument("--hexdump", action="store_true", help="Display payloads as hexdump")
    parser.add_argument("--port", type=int, help="Filter by TCP port")
    parser.add_argument("--ip", help="Filter by IP address (source or destination)")
    parser.add_argument("--raw-output", metavar="FILE", help="Write raw TCP payloads to FILE, or '-' for stdout")
    parser.add_argument("--skip", type=int, help="Skip n bytes before outputting a payload (useful for prefix encoded packages)")
    args = parser.parse_args()

    try:
        packets = rdpcap(args.pcap_file)
    except FileNotFoundError:
        print(f"File '{args.pcap_file}' not found.")
        sys.exit(1)

    output_stream = None
    if args.raw_output:
        if args.raw_output == '-':
            output_stream = sys.stdout.buffer
        else:
            try:
                output_stream = open(args.raw_output, 'wb')
            except Exception as e:
                print(f"Could not open output file: {e}")
                sys.exit(1)

    for pkt in packets:
        if pkt.haslayer(TCP):
            if args.port and not (pkt[TCP].sport == args.port or pkt[TCP].dport == args.port):
                continue
            if args.ip and pkt.haslayer(IP):
                if not (pkt[IP].src == args.ip or pkt[IP].dst == args.ip):
                    continue

            payload = bytes(pkt[TCP].payload)
            if payload:
                if args.raw_output:
                    output_stream.write(payload)
                elif args.hexdump:
                    hexdump(payload)
                else:
                    skip_bytes = args.skip or 0
                    print(payload[skip_bytes:].decode(errors='replace'))

    if output_stream and output_stream is not sys.stdout.buffer:
        output_stream.close()

if __name__ == "__main__":
    main()

