#!/bin/bash
# Script to fetch the required secrets in a typical Posten/Bring repo
# @author Carl-Erik Kopseng <carlerik@gmail.com>
#
# Example
# ❯ azure-secrets-in-repo 
# Secrets:		deploy/values.yaml
# Keyvault:		myteam-qa-9ui
# Active subscription:	CustomerFront-1234-PROD
# 
# "authentication.adaptor.passphrase" => "2b5201fa-77f1-11ee-bce7-762385b5200a-uh-uh-thats-not-it"
# "authentication.adaptor.user" => "2b5201fa-77f1-11ee-bce7-762385b5200a-uh-uh-thats-not-it"
# "authentication.pakkeboks.passphrase" => "2b5201fa-77f1-11ee-bce7-762385b5200a-uh-uh-thats-not-it"
# "authentication.pakkeboks.user" => "2b5201fa-77f1-11ee-bce7-762385b5200a-uh-uh-thats-not-it"

set -e
DEFAULT_FILE="deploy/values.yaml"
DEFAULT_VAULT=tandn-qa-8yi

usage(){
    command=$(basename $0)
    echo
    echo "Fetch all required secrets for using the current repository ($(local-repo))"
    echo
    echo "USAGE: $command [--file <secrets-file.yml>] [--vault <vault>] [--subscription <subscription>]"
    echo
    echo "Options"
    echo "    --file               Set the file used for fetching secrets. If none is given"
    echo "                         the default used is $DEFAULT_FILE"
    echo "    --vault              Set the vault used for fetching secrets. If none is given"
    echo "                         the default used is $DEFAULT_VAULT"
    echo "    --subscription       Choose a specific subscription. Will use the currently chosen/logged-in by default"
    echo "    --list-vaults        List the available Azure key vaults"
    echo "    --list-subscriptions List the available Azure subscriptions"
    exit 1
}

handle-list-secrets(){
    printf "Active subscription:\t%s\n\n" "$(current-subscription)"
    printf "Secrets:\t\t%s\nKeyvault:\t\t%s\n" $file $keyvault

    local keys=($(yq '.secrets | keys[]' $file)) # bash array

    for key in ${keys[@]}; do
        process-entry $file "$key"
    done
}

handle-list-subscriptions(){
    local chosen_subscription=$(current-subscription)
    echo "Available subscriptions: $(printf "%s " $(subscriptions))" # joins lines
    echo "Currently chosen subscription: $chosen_subscription."
}

handle-list-vaults(){
    printf "\n%s\n" "Available key vaults:"
    printf "%s\n"   "----------------"
    az keyvault list | jq --raw-output 'map(.name)[]' | sort
}

local-repo(){ 
    local url=$(git config remote.origin.url);
    echo $url | sed -E -n -e 's/.*github.com[:/]([/a-zA-Z0-9-]+)(\.git)?/\1/p'
}

subscriptions(){
    az account list | jq --raw-output 'map(.name)[]'
}

current-subscription(){
    az account list | jq --raw-output '.[] | select(.isDefault == true).name'
}

dependencies(){
    command -v jq > /dev/null || (printf "This script requires the jq command to back the yq command: \n\
        brew install jq" && exit 1)
    command -v yq > /dev/null || (printf "This script requires the yq command to parse YAML: \n\
        brew install python-yq" && exit 1)
}

process-entry(){
    local file="$1"
    local key="$2"
    local value=$(yq --raw-output ".secrets["$key"]" $file)

    local secret=$(az keyvault secret show   --vault-name "$VAULT" --name $value | jq .value)

    printf "%s\n" "$key => $secret"
}

main(){
    local file="$1"
    local keyvault="$2"
    local action="$3"
    local chosen_subscription="$4"

    if [[ "$chosen_subscription" != "" ]]; then
        az account set --subscription "$chosen_subscription"
    fi

    case $action in
        list-secrets)
            handle-list-secrets
            ;;
        list-vaults)
            handle-list-vaults
            ;;
        list-subscriptions)
            handle-list-subscriptions
            ;;
        *)
            printf "Illegal action chosen: %s\n" "$action"
            exit 1
    esac
}

dependencies

# process args

FILE=$DEFAULT_FILE
VAULT=$DEFAULT_VAULT
ACTION=list-secrets # list-secrets | list-vaults | list-subscriptions
SUBSCRIPTION=
while [[ $# > 0 ]] ; do
    #echo processing $# arguments
    case $1 in
        --file)
            FILE=$2
            shift 2
            ;;
        --vault)
            VAULT=$2
            shift 2
            ;;
        --subscription)
            SUBSCRIPTION=$2
            shift 2
            ;;
        --list-vaults)
            ACTION=list-vaults
            shift 1
            ;;
        --list-subscriptions)
            ACTION=list-subscriptions
            shift 1
            ;;
        *)
            usage
            ;;
    esac
done

main $FILE $VAULT $ACTION $SUBSCRIPTION
