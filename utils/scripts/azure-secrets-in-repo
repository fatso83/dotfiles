#!/bin/bash
# Script to fetch the required secrets in a typical Posten/Bring repo
# @author Carl-Erik Kopseng <carlerik@gmail.com>

set -e
DEFAULT_FILE="deploy/values.yaml"
DEFAULT_VAULT=tandn-qa-8yi
DEFAULT_SUBSCRIPTION=$(az account list | jq --raw-output '.[] | select(.isDefault == true).name')

usage(){
    echo
    echo "Fetch all required secrets for using this software"
    echo
    echo "USAGE: $0 [--file secrets.yml] [--vault CustomerFront-1234]"
    echo
    echo "Options"
    echo "    --file          Set the file used for fetching secrets. If none is given"
    echo "                    the default used is $DEFAULT_FILE"
    echo "    --vault         Set the vault used for fetching secrets. If none is given"
    echo "                    the default used is $DEFAULT_VAULT"
    echo "    --subscription  Choose a specific subscription (currently chosen: $DEFAULT_SUBSCRIPTION)."
    echo "                    Available: $(printf "%s " $(subscriptions))" # joins lines
    echo "    --list-vaults   Just list the available Azure key vaults"
    exit 1
}

subscriptions(){
    az account list | jq --raw-output 'map(.name)[]'
}

dependencies(){
    command -v jq > /dev/null || (printf "This script requires the jq command to back the yq command: \n\
        brew install jq" && exit 1)
    command -v yq > /dev/null || (printf "This script requires the yq command to parse YAML: \n\
        brew install python-yq" && exit 1)
}

process-entry(){
    local file="$1"
    local key="$2"
    local value=$(yq --raw-output ".secrets["$key"]" $file)

    local secret=$(az keyvault secret show   --vault-name "$VAULT" --name $value | jq .value)

    printf "%s\n" "$key => $secret"
}

# arg1: filename
main(){
    local file="$1"
    local keyvault="$2"
    local chosen_subscription="$3"
    local active_subscription="${chosen_subscription:-$DEFAULT_SUBSCRIPTION}"

    printf "Secrets:\t\t%s\nKeyvault:\t\t%s\n" $file $keyvault
    printf "Active subscription:\t%s\n\n" "$active_subscription"

    if [[ "$chosen_subscription" != "" ]]; then
        az account set --subscription "$chosen_subscription"
    fi

    local keys=($(yq '.secrets | keys[]' $file)) # bash array

    for key in ${keys[@]}; do
        process-entry $file "$key"
    done
}


dependencies

# process args

FILE=$DEFAULT_FILE
VAULT=$DEFAULT_VAULT
SUBSCRIPTION=
while [[ $# > 0 ]] ; do
    #echo processing $# arguments
    case $1 in
        --file)
            FILE=$2
            ;;
        --vault)
            VAULT=$2
            ;;
        --subscription)
            SUBSCRIPTION=$2
            ;;
        --list-vaults)
            printf "\n%s\n" "Available repos:"
            printf "%s\n"   "----------------"
            az keyvault list | jq --raw-output 'map(.name)[]'
            exit 0
            ;;
        *)
            usage
            ;;
    esac
    shift 2
done

main $FILE $VAULT $SUBSCRIPTION
